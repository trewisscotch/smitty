#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(__FILE__), '/../lib'))
require 'mail'
require 'docopt'
require 'nokogiri'
require 'premailer'
require 'smitty'
require 'securerandom'

# Parse arguments
begin
  args = Docopt::docopt(Smitty::USAGE, {version: Smitty::VERSION})
rescue Docopt::Exit => e
  puts e.message
  exit(0)
end

# Create SMTP connection and set Mail default
smtp_conn = Smitty.smtp_connect(args['--server'], args['--port'], args['--ssl'], args['--username'], args['--password'], args['--ignorecert'])
Mail.defaults do
  delivery_method :smtp_connection, { :connection => smtp_conn }
end

attachments = args['-a'].split(',') if args['-a']
from_address = args['<from_address>']
match_address = /[-0-9a-z.+_]+@[-0-9a-z.+_]+\.[a-z]{2,}/i.match(from_address).to_s
subject = args['<subject>']
message_id_fqdn = match_address.split('@')[1]
message_id_fqdn = args['-messageid'] if args['-messageid']
sleep = args['--sleep'] unless args['--sleep'].nil?

# Read to_file into list of addresses
begin
  to_addresses = File.readlines(args['<to_file>']).map(&:chomp)
rescue Errno::ENOENT => e
  Smitty.croak("Count not open #{args['<to_file>']}", e.message)
end

# Read in template
begin
  template = Premailer.new(args['<template>'])
rescue Errno::ENOENT => e
  Smitty.croak("Could not open #{args['<to_file>']}", e.message)
end

# Parse replacement variables, exiting if length is not equal to to_file
variables = []
variables = args['--vars'].split(',').map { |var| Smitty.variable_parser(var, to_addresses.length) } unless args['--vars'].nil?

# Loop over each receipient, create a temporary template,
# replace variables, and send the message
to_addresses.each do |to_address|
  template_copy = String.new(template.to_inline_css)
  subject_copy = String.new(subject)
  template_copy.gsub!('%7B%7B', '{{')
  template_copy.gsub!('%7D%7D', '}}')
  # Replace each variable in the template
  variables.each do |variable|
    if variable[:with].kind_of?(Array)
      sub_text = variable[:with].shift()
    else
      sub_text = variable[:with]
    end
    template_copy.gsub!("{{#{variable[:replace_string]}}}", sub_text)
    subject_copy.gsub!("{{#{variable[:replace_string]}}}", sub_text)
  end
  Smitty.croak('A marker was found in the template that did not have a matching key') if template_copy =~ /\{\{\w+\}\}/
  Smitty.croak('A marker was found in the subject that did not have a matching key') if subject_copy =~ /\{\{\w+\}\}/
  # Create the new mail object
  mail = Mail.new()
  mail.from = from_address
  mail.to = to_address
  mail.bcc = args['--bcc'] unless args['--bcc'].nil?
  mail.cc = args['--cc'] unless args['--cc'].nil?
  mail.subject = subject_copy
  mail.message_id = "<#{SecureRandom.hex(8)}.#{SecureRandom.hex(8)}@#{message_id_fqdn}>"

  # Attach each file to the message
  begin
    attachments.each { |file|
      # Define custom ID value for attached image
      a_fqdn = match_address.split('@')[1]
      a_fqdn = args['-messageid'] if args['-messageid']
      a_id = "<#{SecureRandom.hex(8)}.#{SecureRandom.hex(8)}@#{a_fqdn}>"
      mail.attachments[file] = {:content => File.read(file),
                                :content_id => a_id}
      if  args['--cid']
        file.sub!(/.*?\/(\w+\.\w{3})$/, '\1')
        image = mail.attachments[file]
        template_copy.gsub!("{{#{file}}}", image.cid)
        subject_copy.gsub!("{{#{file}}}", image.cid)
      end
    } unless attachments.nil?
  rescue Exception => e
    Smitty.croak('Could not attach file', e.message)
  end
  
  bodypart = Mail::Part.new do
    text_part do
      body Nokogiri::HTML(template_copy).text
    end
    html_part do
      content_type 'text/html; charset=UTF-8'
      body template_copy
    end
  end
  mail.add_part bodypart

  if args['--dry-run']
    puts mail.to_s
  else
    puts "Sending message to #{to_address}"
    begin
      mail.deliver!
      puts "Message sent"
      if defined?(sleep) && !to_address.equal?(to_addresses.last)
        puts "Sleeping for #{sleep} seconds"
        sleep(sleep.to_i)
      end
    rescue Exception => e
      puts "Error: #{e.message}"
    end
  end
end
